define:
  flow_version: "2.13.2"
  mysql_version: "8.0.43"
  redis_version: "6.2-alpine"
  mongo_version: "4.4"
  loki_version: "3.4.2"
  grafana_version: "11.5.2"
  rabbitmq_version: "3-management"

services:
  api:
    image: "itemizebi/api:${flow_version}"
    network_mode: host
    restart: "on-failure"
    env_file:
    - ./infra.secrets.env
    depends_on:
    - "itemizebi/sidecar:${flow_version}"
    - "itemizebi/overhead:${flow_version}"
    - "itemizebi/scheduler:${flow_version}"
    - "itemizebi/worker:${flow_version}"
    environment:
    - FLOW_LOGGER_NAME=WEB
    - PYTHONUNBUFFERED=1
    - PYTHONBREAKPOINT=0
    - TERM=xterm-256color
    check:
      endpoint: /ok
    instances:
      api1:
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:8001/ok"]
          interval: 10s
          timeout: 5s
          retries: 5
        environment:
        - APP_PORT=8001
        command: bash -c "uvicorn --loop uvloop --host 0.0.0.0 --port 8001 --log-level info --timeout-keep-alive 3600 app_asgi:app"
        check:
          port: 8001

      api2:
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:8002/ok"]
          interval: 10s
          timeout: 5s
          retries: 5
        environment:
        - APP_PORT=8002
        command: bash -c "uvicorn --loop uvloop --host 0.0.0.0 --port 8002 --log-level info --timeout-keep-alive 3600 app_asgi:app"
        check:
          port: 8002

      api3:
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:8003/ok"]
          interval: 10s
          timeout: 5s
          retries: 5
        environment:
        - APP_PORT=8003
        command: bash -c "uvicorn --loop uvloop --host 0.0.0.0 --port 8003 --log-level info --timeout-keep-alive 3600 app_asgi:app"
        check:
          port: 8003

      api4:
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:8004/ok"]
          interval: 10s
          timeout: 5s
          retries: 5
        environment:
        - APP_PORT=8004
        command: bash -c "uvicorn --loop uvloop --host 0.0.0.0 --port 8004 --log-level info --timeout-keep-alive 3600 app_asgi:app"
        check:
          port: 8004

  sidecar:
    image: "itemizebi/sidecar:${flow_version}"
    instances:
      sidecar:
        network_mode: host
        restart: "on-failure"
        env_file:
        - ./infra.secrets.env
        volumes:
        - ./src:/home/itemize/flow/src
        environment:
        - APP_PORT=8020
        - FLOW_LOGGER_NAME=WEB
        - PYTHONUNBUFFERED=1
        - PYTHONBREAKPOINT=0
        - TERM=xterm-256color
        command: bash -c "uvicorn --loop uvloop --host 0.0.0.0 --port 8020 --log-level info --timeout-keep-alive 3600 app_sidecar:app"

  scheduler:
    image: "itemizebi/scheduler:${flow_version}"
    depends_on:
    - "itemizebi/worker:${flow_version}"
    - "itemizebi/sidecar:${flow_version}"
    instances:
      scheduler:
        network_mode: host
        restart: "on-failure"
        volumes:
        - ./src:/home/itemize/flow/src
        env_file:
        - ./infra.secrets.env
        environment:
        - FLOW_LOGGER_NAME=SCHEDULER

  worker:
    image: "itemizebi/worker:${flow_version}"
    depends_on:
    - "itemizebi/sidecar:${flow_version}"
    instances:
      worker:
        network_mode: host
        restart: "always"
        env_file:
        - ./infra.secrets.env
        environment:
        - FLOW_LOGGER_NAME=ORCAMENTO_WORKER
        command: python app_worker.py

  overhead:
    image: "itemizebi/overhead:${flow_version}"
    instances:
      overhead:
        network_mode: host
        restart: "on-failure"
        command: bash -c "uvicorn --host 0.0.0.0 --loop uvloop --port 5000 --log-level info --timeout-keep-alive 3600 app_overhead:app"

infra:
  mysql:
    image: "mysql:${mysql_version}"
    instances:
      mysql:
        restart: unless-stopped
        env_file:
        - ./infra.secrets.env
        network_mode: host
        volumes:
        - ./sqls/mysql-init:/docker-entrypoint-initdb.d
        - mysql_data:/var/lib/mysql
        - ./backup.prod.sql:/backup.prod.sql

        healthcheck:
          test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
          interval: 10s
          timeout: 5s
          retries: 5

  redis:
    image: "redis:${redis_version}"
    instances:
      cache:
        network_mode: host
        restart: always
        mem_limit: 256m
        volumes:
        - cache:/data
        environment:
        - REDIS_MAXMEMORY=256m

  broker:
    image: "rabbitmq:${rabbitmq_version}"
    instances:
      broker: # ports 15672, 5672, 25672
        network_mode: host
        volumes:
        - /docker_conf/rabbitmq/data/:/var/lib/rabbitmq/
        env_file:
        - ./infra.secrets.env
        restart: always

  mongo:
    image: "mongo:${mongo_version}"
    instances:
      mongodb:
        network_mode: host
        env_file:
        - ./infra.secrets.env
        volumes:
        - mongodb-data:/data/db   # Persistência dos dados
        - mongodb-logs:/var/log/mongodb   # Persistência dos logs (opcional)

  prometheus:
    image: "prom/prometheus"
    instances:
      prometheus:
        # ports:
        #   - "9090:9090"
        network_mode: host
        restart: unless-stopped
        volumes:
        - ./conf/prometheus.yml:/etc/prometheus/prometheus.yml
        - prometheus-data:/prometheus

  loki:
    image: "grafana/loki:${loki_version}"
    instances:
      loki:
        restart: unless-stopped
        ports:
        - "3111:3111"
        volumes:
        - ./conf/loki.yaml:/etc/loki/loki.yaml
        - loki-data:/var/loki
        environment:
        - LOKI_CONFIG_FILE=/etc/loki/loki.yaml
        command: -config.file=/etc/loki/loki.yaml

  grafana:
    image: "grafana/grafana:${grafana_version}"
    instances:
      ports:
      - "3000:3000"
      environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      depends_on:
      - loki
      restart: unless-stopped
      volumes:
      - grafana-data:/var/lib/grafana

volumes:
  mysql_data:
  cache:
  loki-data:
  grafana-data:
  mongodb-data:
  mongodb-logs:
  prometheus-data:

networks:
  default:
    name: flow_network
    driver: bridge
